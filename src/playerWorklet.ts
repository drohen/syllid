const worker = `var u;(function(r){r.state="state",r.buffer="buffer",r.add="add"})(u||(u={}));var o;(function(r){r.feed="feed",r.id="id",r.end="end"})(o||(o={}));var i;(function(r){r.new="new",r.stale="stale"})(i||(i={}));var l=class extends AudioWorkletProcessor{constructor(e){super(e);this.bindFns(),this.sources=[],this.sourceKey={},this.playingBuffer=[],this.endBuffer=[],this.requestBuffer=[],this.port.onmessage=t=>this.handleMessage(t),this.handlers={[u.state]:this.handleState,[u.buffer]:this.handleBuffer,[u.add]:this.handleAdd}}bindFns(){this.handleMessage=this.handleMessage.bind(this),this.handleState=this.handleState.bind(this),this.handleBuffer=this.handleBuffer.bind(this),this.handleAdd=this.handleAdd.bind(this),this.bufferKey=this.bufferKey.bind(this),this.process=this.process.bind(this),this.onEndProcess=this.onEndProcess.bind(this)}newStreamItem(e){return{id:e,bufferCursor:0,currentBuffer:0,state:!1,requested:0,totalBuffers:0,bufferState:i.new}}handleMessage(e){this.handlers[e.data.type](e.data)}handleAdd(e){e.type===u.add&&typeof e.id=="string"&&this.sourceKey[e.id]===void 0&&(this.sourceKey[e.id]=e.index,this.sources[e.index]=this.newStreamItem(e.id))}handleState(e){if(e.type!==u.state||typeof e.state!="boolean"||typeof e.id!="string")return;let t=this.sourceKey[e.id];t!==void 0&&(this.sources[t].state=e.state,this.sources[t].requested=0)}handleBuffer(e){if(e.type!==u.buffer||e.buffer?.buffer===void 0||typeof e.id!="string"||typeof e.bufferID!="string")return;let t=this.sourceKey[e.id];t===void 0&&(t=this.sources.length,this.sourceKey[e.id]=t,this.sources.push(this.newStreamItem(e.id)));let f=this.bufferKey(t);this.sources[t][f]={buffer:e.buffer,id:e.bufferID},this.sources[t].requested=0}bufferKey(e){let t=this.sources[e].totalBuffers;return this.sources[e].totalBuffers+=1,t}onEndProcess(){this.playingBuffer.length>0&&this.port.postMessage(this.emitBufferIDs(this.playingBuffer)),this.endBuffer.length>0&&this.port.postMessage(this.emitEndIDs(this.endBuffer)),this.requestBuffer.length=0;let e=Date.now();for(let t=0;t<this.sources.length;t+=1)!this.sources[t].state&&this.sources[t].totalBuffers>0&&(this.sources[t]=this.newStreamItem(this.sources[t].id)),this.sources[t].state&&!this.sources[t].requested&&this.sources[t].totalBuffers-this.sources[t].currentBuffer<4?(this.sources[t].requested=e,this.requestBuffer.push(this.sources[t].id)):this.sources[t].requested&&e-this.sources[t].requested>1e3&&(this.sources[t].requested=0);this.requestBuffer.length>0&&this.port.postMessage(this.emitFeedRequest(this.requestBuffer))}emitBufferIDs(e){return{idList:e,type:o.id}}emitFeedRequest(e){return{streams:e,type:o.feed}}emitEndIDs(e){return{idList:e,type:o.end}}process(e,t){try{this.playingBuffer.length=0,this.endBuffer.length=0;for(let f=0;f<this.sources.length;f+=1){let s=this.sources[f];if(!s||!s.state)continue;let d=t[f];if(!d)continue;let n=d[0];if(!s.state||!s.totalBuffers||!s[s.currentBuffer]){n.fill(0);continue}for(let h=0;h<n.length;h+=1){if(!s.state||!s.totalBuffers||!s[s.currentBuffer]){n.fill(0,h);break}s.bufferState===i.new&&(this.playingBuffer.push({bufferID:s[s.currentBuffer].id,sourceID:s.id}),s.bufferState=i.stale),n[h]=s[s.currentBuffer].buffer[s.bufferCursor];let c=!1;if(s.bufferCursor>s[s.currentBuffer].buffer.length-2e3&&s[s.currentBuffer+1]){let a=2e3-(s[s.currentBuffer].buffer.length-s.bufferCursor);n[h]+=s[s.currentBuffer+1].buffer[a],c=!0}s.bufferCursor+=1,s.bufferCursor===s[s.currentBuffer].buffer.length&&(delete s[s.currentBuffer],s.bufferCursor=c?2e3:0,s.currentBuffer+=1,s.bufferState=i.new,s[s.currentBuffer]||this.endBuffer.push(s.id))}}this.onEndProcess()}catch(f){console.warn("Audio Worklet Errored:",f)}return!0}};registerProcessor("playerWorklet",l);`

export default worker