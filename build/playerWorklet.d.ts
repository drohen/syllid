declare const worker = "var t;(function(f){f.state=\"state\",f.buffer=\"buffer\"})(t||(t={}));var a=class extends AudioWorkletProcessor{constructor(e){super(e);this.bindFns(),this.channels=Array(e?.outputChannelCount?.[0]??2).fill(void 0).map(()=>this.newChannelItem()),this.port.onmessage=l=>this.handleMessage(l),this.handlers={[t.state]:this.handleState,[t.buffer]:this.handleBuffer}}bindFns(){this.handleMessage=this.handleMessage.bind(this),this.handleState=this.handleState.bind(this),this.handleBuffer=this.handleBuffer.bind(this),this.process=this.process.bind(this)}newChannelItem(){return{bufferCursor:0,currentBuffer:0,state:!1,totalBuffers:0}}handleMessage(e){this.handlers[e.data.type](e.data)}handleState(e){e.type===t.state&&(typeof e.state!=\"boolean\"||typeof e.channel!=\"number\"||!this.channels[e.channel]||(this.channels[e.channel].state=e.state))}handleBuffer(e){e.type===t.buffer&&(e.buffer?.buffer===void 0||typeof e.channel!=\"number\"||!this.channels[e.channel]||(this.channels[e.channel].state||(this.channels[e.channel].state=!0),this.channels[e.channel][this.channels[e.channel].totalBuffers]=e.buffer,this.channels[e.channel].totalBuffers+=1))}process(e,l){let u=l[0],i=Math.min(this.channels.length,u.length);for(let r=0;r<i;r+=1){let h=u[r],n=this.channels[r];for(let s=0;s<h.length;s+=1)n.state?!n.totalBuffers||!n[n.currentBuffer]?h[s]=Math.random()*1e-4:(h[s]=n[n.currentBuffer][n.bufferCursor],n.bufferCursor+=1,n.bufferCursor===n[n.currentBuffer].length&&(delete n[n.currentBuffer],n.bufferCursor=0,n.currentBuffer+=1)):h[s]=0}return!0}};registerProcessor(\"playerWorklet\",a);";
export default worker;
//# sourceMappingURL=playerWorklet.d.ts.map