declare const worker = "var f;(function(r){r.state=\"state\",r.buffer=\"buffer\",r.add=\"add\"})(f||(f={}));var d;(function(r){r.feed=\"feed\",r.id=\"id\",r.end=\"end\"})(d||(d={}));var u;(function(r){r.new=\"new\",r.stale=\"stale\"})(u||(u={}));var c;(function(r){r.stopped=\"stopped\",r.playing=\"playing\"})(c||(c={}));var a=class extends AudioWorkletProcessor{constructor(e){super(e);this.bindFns(),this.sources=[],this.sourceKey={},this.playingBuffer=[],this.endBuffer=[],this.requestBuffer=[],this.port.onmessage=t=>this.handleMessage(t),this.handlers={[f.state]:this.handleState,[f.buffer]:this.handleBuffer,[f.add]:this.handleAdd}}bindFns(){this.handleMessage=this.handleMessage.bind(this),this.handleState=this.handleState.bind(this),this.handleBuffer=this.handleBuffer.bind(this),this.handleAdd=this.handleAdd.bind(this),this.bufferKey=this.bufferKey.bind(this),this.process=this.process.bind(this),this.onEndProcess=this.onEndProcess.bind(this),this.isPlaying=this.isPlaying.bind(this)}newStreamItem(e){return{id:e,bufferCursor:0,currentBuffer:0,state:c.stopped,requested:0,totalBuffers:0,bufferState:u.new}}handleMessage(e){this.handlers[e.data.type](e.data)}handleAdd(e){e.type===f.add&&typeof e.id==\"string\"&&this.sourceKey[e.id]===void 0&&(this.sourceKey[e.id]=e.index,this.sources[e.index]=this.newStreamItem(e.id))}handleState(e){if(e.type!==f.state||typeof e.state!=\"string\"||typeof e.id!=\"string\")return;let t=this.sourceKey[e.id];t!==void 0&&(this.sources[t].state=e.state,this.sources[t].requested=0)}handleBuffer(e){if(e.type!==f.buffer||e.buffer?.buffer===void 0||typeof e.id!=\"string\"||typeof e.bufferID!=\"string\")return;let t=this.sourceKey[e.id];t===void 0&&(t=this.sources.length,this.sourceKey[e.id]=t,this.sources.push(this.newStreamItem(e.id)));let i=this.bufferKey(t);this.sources[t][i]={buffer:e.buffer,id:e.bufferID},this.sources[t].requested=0}bufferKey(e){let t=this.sources[e].totalBuffers;return this.sources[e].totalBuffers+=1,t}isPlaying(e){return this.sources[e].state===c.playing}onEndProcess(){this.playingBuffer.length>0&&this.port.postMessage(this.emitBufferIDs(this.playingBuffer)),this.endBuffer.length>0&&this.port.postMessage(this.emitEndIDs(this.endBuffer)),this.requestBuffer.length=0;let e=Date.now();for(let t=0;t<this.sources.length;t+=1){!this.isPlaying(t)&&this.sources[t].totalBuffers>0&&(this.sources[t]=this.newStreamItem(this.sources[t].id));let i=this.sources[t].totalBuffers-this.sources[t].currentBuffer,s=e-this.sources[t].requested,n=!!this.sources[t].requested;this.isPlaying(t)&&!n&&i<4?(this.sources[t].requested=e,this.requestBuffer.push(this.sources[t].id)):n&&s>1e3&&(this.sources[t].requested=0)}this.requestBuffer.length>0&&this.port.postMessage(this.emitFeedRequest(this.requestBuffer))}emitBufferIDs(e){return{idList:e,type:d.id}}emitFeedRequest(e){return{streams:e,type:d.feed}}emitEndIDs(e){return{idList:e,type:d.end}}process(e,t){try{this.playingBuffer.length=0,this.endBuffer.length=0;for(let i=0;i<this.sources.length;i+=1){let s=this.sources[i];if(!s||!this.isPlaying(i))continue;let n=t[i];if(!n)continue;let h=n[0];if(!this.isPlaying(i)||!s.totalBuffers||!s[s.currentBuffer]){h.fill(0);continue}for(let o=0;o<h.length;o+=1){if(!this.isPlaying(i)||!s.totalBuffers||!s[s.currentBuffer]){h.fill(0,o);break}s.bufferState===u.new&&(this.playingBuffer.push({bufferID:s[s.currentBuffer].id,sourceID:s.id}),s.bufferState=u.stale),h[o]=s[s.currentBuffer].buffer[s.bufferCursor];let b=!1,l=sampleRate*.01;if(s.bufferCursor>s[s.currentBuffer].buffer.length-l&&s[s.currentBuffer+1]){let p=l-(s[s.currentBuffer].buffer.length-s.bufferCursor);h[o]+=s[s.currentBuffer+1].buffer[p],b=!0}s.bufferCursor+=1,s.bufferCursor===s[s.currentBuffer].buffer.length&&(delete s[s.currentBuffer],s.bufferCursor=b?l:0,s.currentBuffer+=1,s.bufferState=u.new,s[s.currentBuffer]||this.endBuffer.push(s.id))}}this.onEndProcess()}catch(i){console.warn(\"Audio Worklet Errored:\",i)}return!0}};registerProcessor(\"playerWorklet\",a);export{a as PlayerWorklet};";
export default worker;
//# sourceMappingURL=playerWorklet.d.ts.map