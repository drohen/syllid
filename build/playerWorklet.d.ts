declare const worker = "var r;(function(h){h.state=\"state\",h.buffer=\"buffer\"})(r||(r={}));var i=class extends AudioWorkletProcessor{constructor(n){super(n);this.bindFns(),this.channels=Array(n?.outputChannelCount?.[0]??2).fill(void 0).map(()=>this.newChannelItem()),this.port.onmessage=u=>this.handleMessage(u),this.handlers={[r.state]:this.handleState,[r.buffer]:this.handleBuffer}}bindFns(){this.handleMessage=this.handleMessage.bind(this),this.handleState=this.handleState.bind(this),this.handleBuffer=this.handleBuffer.bind(this),this.process=this.process.bind(this)}newChannelItem(){return{bufferCursor:0,currentBuffer:0,state:!1,totalBuffers:0}}handleMessage(n){this.handlers[n.data.type](n.data)}handleState(n){n.type===r.state&&(typeof n.state!=\"boolean\"||typeof n.channel!=\"number\"||!this.channels[n.channel]||(this.channels[n.channel].state=n.state))}handleBuffer(n){n.type===r.buffer&&(n.buffer?.buffer===void 0||typeof n.channel!=\"number\"||!this.channels[n.channel]||(this.channels[n.channel].state||(this.channels[n.channel].state=!0),this.channels[n.channel][this.channels[n.channel].totalBuffers]=n.buffer,this.channels[n.channel].totalBuffers+=1))}process(n,u){let l=u[0],a=Math.min(this.channels.length,l.length);for(let f=0;f<a;f+=1){let s=l[f],e=this.channels[f];for(let t=0;t<s.length;t+=1)if(!e.state)s[t]=0;else if(!e.totalBuffers||!e[e.currentBuffer])s[t]=Math.random()*.001;else{if(s[t]=e[e.currentBuffer][e.bufferCursor],e.bufferCursor>e[e.currentBuffer].length-2e3&&e[e.currentBuffer+1]){let c=2e3-(e[e.currentBuffer].length-e.bufferCursor);s[t]+=e[e.currentBuffer+1][c]}e.bufferCursor+=1,e.bufferCursor===e[e.currentBuffer].length&&(delete e[e.currentBuffer],e.bufferCursor=2e3,e.currentBuffer+=1)}}return!0}};registerProcessor(\"playerWorklet\",i);";
export default worker;
//# sourceMappingURL=playerWorklet.d.ts.map