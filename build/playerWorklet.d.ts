declare const worker = "var i;(function(r){r.state=\"state\",r.buffer=\"buffer\",r.add=\"add\",r.reset=\"reset\"})(i||(i={}));var o;(function(r){r.feed=\"feed\",r.id=\"id\"})(o||(o={}));var u;(function(r){r.new=\"new\",r.stale=\"stale\"})(u||(u={}));var l=class extends AudioWorkletProcessor{constructor(e){super(e);this.bindFns(),this.sources=[],this.sourceKey={},this.playingBuffer=[],this.requestBuffer=[],this.port.onmessage=s=>this.handleMessage(s),this.handlers={[i.state]:this.handleState,[i.buffer]:this.handleBuffer,[i.add]:this.handleAdd,[i.reset]:this.handleReset}}bindFns(){this.handleMessage=this.handleMessage.bind(this),this.handleState=this.handleState.bind(this),this.handleBuffer=this.handleBuffer.bind(this),this.handleAdd=this.handleAdd.bind(this),this.handleReset=this.handleReset.bind(this),this.bufferKey=this.bufferKey.bind(this),this.process=this.process.bind(this),this.onEndProcess=this.onEndProcess.bind(this)}newStreamItem(e){return{id:e,bufferCursor:0,currentBuffer:0,state:!1,requested:0,totalBuffers:0,bufferState:u.new}}handleMessage(e){this.handlers[e.data.type](e.data)}handleAdd(e){e.type===i.add&&typeof e.id==\"string\"&&this.sourceKey[e.id]===void 0&&(this.sourceKey[e.id]=e.index,this.sources[e.index]=this.newStreamItem(e.id))}handleState(e){if(e.type!==i.state||typeof e.state!=\"boolean\"||typeof e.id!=\"string\")return;let s=this.sourceKey[e.id];s!==void 0&&(this.sources[s].state=e.state,this.sources[s].requested=0)}handleBuffer(e){if(e.type!==i.buffer||e.buffer?.buffer===void 0||typeof e.id!=\"string\"||typeof e.bufferID!=\"string\")return;let s=this.sourceKey[e.id];s===void 0&&(s=this.sources.length,this.sourceKey[e.id]=s,this.sources.push(this.newStreamItem(e.id)));let f=this.bufferKey(s);this.sources[s][f]={buffer:e.buffer,id:e.bufferID},this.sources[s].requested=0}bufferKey(e){let s=this.sources[e].totalBuffers;return this.sources[e].totalBuffers+=1,s}handleReset(e){if(e.type!==i.reset||typeof e.id!=\"string\")return;let s=this.sourceKey[e.id];if(s===void 0)return;let f=this.sources[s].state;this.sources[s]=this.newStreamItem(e.id),this.sources[s].state=f}onEndProcess(){this.playingBuffer.length>0&&this.port.postMessage(this.emitBufferIDs(this.playingBuffer)),this.requestBuffer.length=0;let e=Date.now();for(let s=0;s<this.sources.length;s+=1)!this.sources[s].state&&this.sources[s].totalBuffers>0&&(this.sources[s]=this.newStreamItem(this.sources[s].id)),this.sources[s].state&&!this.sources[s].requested&&this.sources[s].totalBuffers-this.sources[s].currentBuffer<4?(this.sources[s].requested=e,this.requestBuffer.push(this.sources[s].id)):this.sources[s].requested&&e-this.sources[s].requested>1e3&&(this.sources[s].requested=0);this.requestBuffer.length>0&&this.port.postMessage(this.emitFeedRequest(this.requestBuffer))}emitBufferIDs(e){return{idList:e,type:o.id}}emitFeedRequest(e){return{streams:e,type:o.feed}}process(e,s){try{this.playingBuffer.length=0;for(let f=0;f<this.sources.length;f+=1){let t=this.sources[f];if(!t||!t.state)continue;let d=s[f];if(!d)continue;let n=d[0];if(!t.state||!t.totalBuffers||!t[t.currentBuffer]){n.fill(0);continue}for(let h=0;h<n.length;h+=1){if(!t.state||!t.totalBuffers||!t[t.currentBuffer]){n.fill(0,h);break}t.bufferState===u.new&&(this.playingBuffer.push({bufferID:t[t.currentBuffer].id,sourceID:t.id}),t.bufferState=u.stale),n[h]=t[t.currentBuffer].buffer[t.bufferCursor];let c=!1;if(t.bufferCursor>t[t.currentBuffer].buffer.length-2e3&&t[t.currentBuffer+1]){let a=2e3-(t[t.currentBuffer].buffer.length-t.bufferCursor);n[h]+=t[t.currentBuffer+1].buffer[a],c=!0}t.bufferCursor+=1,t.bufferCursor===t[t.currentBuffer].buffer.length&&(delete t[t.currentBuffer],t.bufferCursor=c?2e3:0,t.currentBuffer+=1,t.bufferState=u.new)}}this.onEndProcess()}catch(f){console.warn(\"Audio Worklet Errored:\",f)}return!0}};registerProcessor(\"playerWorklet\",l);";
export default worker;
//# sourceMappingURL=playerWorklet.d.ts.map