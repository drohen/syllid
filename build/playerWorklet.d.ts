declare const worker = "var s;(function(u){u.state=\"state\",u.buffer=\"buffer\"})(s||(s={}));var a=class extends AudioWorkletProcessor{constructor(t){super(t);this.bindFns(),this.channels=Array(t?.outputChannelCount?.[0]??2).fill(void 0).map(()=>this.newChannelItem()),this.port.onmessage=n=>this.handleMessage(n),this.handlers={[s.state]:this.handleState,[s.buffer]:this.handleBuffer}}bindFns(){this.handleMessage=this.handleMessage.bind(this),this.handleState=this.handleState.bind(this),this.handleBuffer=this.handleBuffer.bind(this),this.process=this.process.bind(this),this.onEndProcess=this.onEndProcess.bind(this)}newChannelItem(){return{bufferCursor:0,currentBuffer:0,state:!1,totalBuffers:0}}handleMessage(t){this.handlers[t.data.type](t.data)}handleState(t){t.type===s.state&&(typeof t.state!=\"boolean\"||typeof t.channel!=\"number\"||!this.channels[t.channel]||(this.channels[t.channel].state=t.state))}bufferKey(t){let n=this.channels[t].totalBuffers;return this.channels[t].totalBuffers+=1,n}handleBuffer(t){if(t.type!==s.buffer||t.buffer?.buffer===void 0||typeof t.channel!=\"number\"||!this.channels[t.channel])return;this.channels[t.channel].state||(this.channels[t.channel].state=!0);let n=this.bufferKey(t.channel);this.channels[t.channel][n]=t.buffer}onEndProcess(){for(let t=0;t<this.channels.length;t+=1)!this.channels[t].state&&this.channels[t].totalBuffers>0&&(this.channels[t]=this.newChannelItem())}process(t,n){let l=n[0],c=Math.min(this.channels.length,l.length);try{for(let r=0;r<c;r+=1){let f=l[r],e=this.channels[r];if(!e.state||!e.totalBuffers||!e[e.currentBuffer]||e.totalBuffers-e.currentBuffer<5){f.fill(0);continue}for(let h=0;h<f.length;h+=1){if(!e.state||!e.totalBuffers||!e[e.currentBuffer]){f.fill(0,h);break}f[h]=e[e.currentBuffer][e.bufferCursor];let i=!1;if(e.bufferCursor>e[e.currentBuffer].length-2e3&&e[e.currentBuffer+1]&&e.totalBuffers-e.currentBuffer-1>=5){let o=2e3-(e[e.currentBuffer].length-e.bufferCursor);f[h]+=e[e.currentBuffer+1][o],i=!0}e.bufferCursor+=1,e.bufferCursor===e[e.currentBuffer].length&&(delete e[e.currentBuffer],e.bufferCursor=i?2e3:0,e.currentBuffer+=1)}}this.onEndProcess()}catch(r){console.warn(\"Audio Worklet Errored:\",r)}return!0}};registerProcessor(\"playerWorklet\",a);";
export default worker;
//# sourceMappingURL=playerWorklet.d.ts.map